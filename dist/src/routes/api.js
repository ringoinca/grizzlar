"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.api = void 0;
const express = __importStar(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const uuid_1 = require("uuid");
const database_1 = require("../lib/database");
const access = __importStar(require("../lib/access"));
const integrations = __importStar(require("../lib/database/integrations"));
const error_handling_1 = require("../lib/error-handling");
const oauth_1 = require("../lib/oauth");
const api = express.Router();
exports.api = api;
api.use(body_parser_1.default.urlencoded({ extended: false }));
api.use(body_parser_1.default.json({ limit: '5mb' }));
/**
 * API authentication middleware.
 *
 * Authenticate requests to the API using a secret key.
 * This requires that you've previously secured your Pizzly's instance.
 * Learn more at https://github.com/Bearer/Pizzly/wiki/Secure
 */
api.use('*', access.secretKey);
/**
 * API test endpoint:
 */
api.get('/', (_req, res) => {
    return res.status(200).json({
        message: 'Successfully connected to the Pizzly API.'
    });
});
/**
 * Retrieves an integration configuration
 */
api.get('/:integrationId', async (req, res, next) => {
    const integrationId = req.params.integrationId;
    const integration = await integrations.get(integrationId).catch(() => {
        return null;
    });
    if (!integration) {
        next(new error_handling_1.PizzlyError('unknown_integration'));
        return;
    }
    return res.status(200).json({
        ...integration,
        id: integrationId,
        object: 'integration'
    });
});
/**
 * Authentications endpoint:
 *
 * - POST /:integration/authentications
 * - GET /:integration/authentications/:authId
 * - PUT /:integration/authentications/:authId
 * - DELETE /:integration/authentications/:authId
 */
/**
 * Saves a new authentication
 * (the authId will be generated by Pizzly)
 */
api.post('/:integrationId/authentications', async (req, res, next) => {
    const integrationId = req.params.integrationId;
    // Make sure the integration exists
    const integration = await integrations.get(integrationId).catch(() => {
        return null;
    });
    if (!integration) {
        next(new error_handling_1.PizzlyError('unknown_integration'));
        return;
    }
    // Validate the body
    const setupId = req.body.setup_id;
    const payload = req.body.payload;
    if (!setupId || typeof setupId !== 'string') {
        next(new error_handling_1.PizzlyError('missing_setup_id'));
        return;
    }
    if (!payload || typeof payload !== 'object') {
        next(new error_handling_1.PizzlyError('missing_oauth_payload'));
        return;
    }
    if (!isOAuthPayload(payload)) {
        next(new error_handling_1.PizzlyError('invalid_oauth_payload'));
        return;
    }
    // Validate the setupId
    const configuration = await database_1.store('configurations')
        .select('buid')
        .where({ buid: integrationId, setup_id: setupId })
        .first();
    if (!configuration) {
        next(new error_handling_1.PizzlyError('unknown_configuration'));
        return;
    }
    // Generate a new authentication
    const authId = uuid_1.v4();
    const now = new Date().toISOString();
    const authentication = {
        object: 'authentication',
        id: authId,
        auth_id: authId,
        setup_id: setupId,
        payload,
        created_at: now,
        updated_at: now
    };
    await database_1.store('authentications').insert({
        buid: integrationId,
        auth_id: authId,
        setup_id: setupId,
        payload
    });
    res.status(201).json({
        message: 'Authentication created',
        authentication
    });
});
/**
 * Retrieves an authentication (including OAuth payload).
 */
api.get('/:integrationId/authentications/:authId', async (req, res, next) => {
    const integrationId = req.params.integrationId;
    const authId = req.params.authId;
    const authenticationInStore = await database_1.store('authentications')
        .select('auth_id', 'setup_id', 'payload', 'created_at', 'updated_at')
        .where({ buid: integrationId, auth_id: authId })
        .first();
    if (!authenticationInStore) {
        next(new error_handling_1.PizzlyError('unknown_authentication'));
        return;
    }
    const authentication = {
        object: 'authentication',
        id: authenticationInStore.auth_id,
        auth_id: authenticationInStore.auth_id,
        setup_id: authenticationInStore.setup_id,
        payload: authenticationInStore.payload,
        created_at: authenticationInStore.created_at,
        updated_at: authenticationInStore.updated_at
    };
    res.status(200).json(authentication);
});
/**
 * Set or update an authentication
 */
api.put('/:integrationId/authentications/:authId', async (req, res, next) => {
    const integrationId = req.params.integrationId;
    const authId = req.params.authId;
    // Make sure the integration exists
    const integration = await integrations.get(integrationId).catch(() => {
        return null;
    });
    if (!integration) {
        next(new error_handling_1.PizzlyError('unknown_integration'));
        return;
    }
    // Validate the body
    const setupId = req.body.setup_id;
    const payload = req.body.payload;
    if (!setupId || typeof setupId !== 'string') {
        next(new error_handling_1.PizzlyError('missing_setup_id'));
        return;
    }
    if (!payload || typeof payload !== 'object') {
        next(new error_handling_1.PizzlyError('missing_oauth_payload'));
        return;
    }
    if (!isOAuthPayload(payload)) {
        next(new error_handling_1.PizzlyError('invalid_oauth_payload'));
        return;
    }
    // Validate the setupId
    const configuration = await database_1.store('configurations')
        .select('buid')
        .where({ buid: integrationId, setup_id: setupId })
        .first();
    if (!configuration) {
        next(new error_handling_1.PizzlyError('unknown_configuration'));
        return;
    }
    let createdAt;
    // Fetch the authentication in database
    const oldAuthentication = await database_1.store('authentications')
        .select('buid')
        .where({ buid: integrationId, auth_id: req.body.auth_id })
        .first();
    // If it exists, update it
    if (oldAuthentication) {
        await database_1.store('authentications')
            .update({
            buid: integrationId,
            auth_id: authId,
            setup_id: setupId,
            payload
        })
            .where({ buid: integrationId, auth_id: authId })
            .limit(1);
        createdAt = oldAuthentication.created_at;
    }
    // Otherwise, create a new one with the provided authId
    else {
        await database_1.store('authentications').insert({
            buid: integrationId,
            auth_id: authId,
            setup_id: setupId,
            payload
        });
        createdAt = new Date().toISOString();
    }
    const authentication = {
        object: 'authentication',
        id: authId,
        auth_id: authId,
        setup_id: setupId,
        payload,
        created_at: createdAt,
        updated_at: new Date().toISOString()
    };
    res.status(200).json({
        message: 'Authentication saved',
        authentication
    });
});
/**
 * Refresh an authentication using the refresh token (if any)
 */
api.post('/:integrationId/authentications/:authId/refresh', async (req, res, next) => {
    const integrationId = req.params.integrationId;
    const authId = req.params.authId;
    // Make sure the integration exists
    const integration = await integrations.get(integrationId).catch(() => {
        return null;
    });
    if (!integration) {
        next(new error_handling_1.PizzlyError('unknown_integration'));
        return;
    }
    const authenticationInStore = await database_1.store('authentications')
        .select('auth_id', 'setup_id', 'payload', 'created_at', 'updated_at')
        .where({ buid: integrationId, auth_id: authId })
        .first();
    if (!authenticationInStore) {
        next(new error_handling_1.PizzlyError('unknown_authentication'));
        return;
    }
    const oldAuthentication = {
        object: 'authentication',
        id: authId,
        auth_id: authId,
        setup_id: authenticationInStore.setup_id,
        payload: authenticationInStore.payload,
        created_at: authenticationInStore.created_at,
        updated_at: authenticationInStore.updated_at
    };
    try {
        const authentication = await oauth_1.refreshAuthentication(integration, oldAuthentication);
        res.json({ message: 'Authentication refreshed', authentication });
    }
    catch (err) {
        if (err instanceof error_handling_1.PizzlyError) {
            return next(err);
        }
        return next(new error_handling_1.PizzlyError('token_refresh_failed'));
    }
});
/**
 * Delete an authentication by removing it from the database
 * (subsequent requests using the same authId will fail).
 */
api.delete('/:integrationId/authentications/:authId', async (req, res, next) => {
    const integrationId = req.params.integrationId;
    const authId = req.params.authId;
    const affectedRows = await database_1.store('authentications')
        .where({ buid: integrationId, auth_id: authId })
        .del();
    if (!affectedRows) {
        next(new error_handling_1.PizzlyError('unknown_authentication'));
        return;
    }
    res.status(200).json({ message: 'Authentication removed' });
});
/**
 * Configurations endpoint:
 *
 * - POST /github/configurations
 * - GET /github/configurations/a1b2c3...
 * - PUT /github/configurations/a1b2c3...
 * - DELETE /github/configurations/a1b2c3...
 */
/**
 * Saves a new configuration
 */
api.post('/:integrationId/configurations', async (req, res, next) => {
    const integrationId = String(req.params.integrationId);
    const integration = await integrations.get(integrationId).catch(() => {
        return null;
    });
    if (!integration) {
        next(new error_handling_1.PizzlyError('unknown_integration'));
        return;
    }
    const userScopes = req.body.scopes || [];
    if (!Array.isArray(userScopes)) {
        next(new error_handling_1.PizzlyError('invalid_scopes'));
        return;
    }
    const scopes = integrations.validateConfigurationScopes(userScopes.join('\n')) || [];
    const credentials = integrations.validateConfigurationCredentials(req.body.credentials, integration);
    if (!credentials) {
        next(new error_handling_1.PizzlyError('invalid_credentials'));
        return;
    }
    const configurationId = uuid_1.v4();
    const configuration = {
        id: configurationId,
        setup_id: configurationId,
        object: 'configuration',
        scopes,
        credentials
    };
    await database_1.store('configurations').insert({
        buid: integrationId,
        setup_id: configurationId,
        credentials,
        scopes
    });
    res.status(201).json({
        message: 'Configuration created',
        configuration
    });
});
/**
 * Retrieve a configuration
 */
api.get('/:integrationId/configurations/:configurationId', async (req, res, next) => {
    const integrationId = String(req.params.integrationId);
    const configurationId = String(req.params.configurationId);
    const savedConfig = await database_1.store('configurations')
        .select('credentials', 'scopes', 'created_at', 'updated_at')
        .where({ buid: integrationId, setup_id: configurationId })
        .first();
    if (!savedConfig) {
        next(new error_handling_1.PizzlyError('unknown_configuration'));
        return;
    }
    const configuration = {
        id: configurationId,
        setup_id: configurationId,
        object: 'configuration',
        scopes: savedConfig.scopes,
        credentials: savedConfig.credentials
    };
    res.json(configuration);
});
/**
 * Delete a configuration
 */
api.delete('/:integrationId/configurations/:configurationId', async (req, res, next) => {
    const integrationId = String(req.params.integrationId);
    const configurationId = String(req.params.configurationId);
    const affectedRows = await database_1.store('configurations')
        .where({ buid: integrationId, setup_id: configurationId })
        .del();
    if (!affectedRows) {
        next(new error_handling_1.PizzlyError('unknown_configuration'));
        return;
    }
    res.status(200).json({ message: 'Configuration removed' });
});
/**
 * Update a configuration
 */
api.put('/:integrationId/configurations/:configurationId', async (req, res, next) => {
    const integrationId = String(req.params.integrationId);
    const configurationId = String(req.params.configurationId);
    const integration = await integrations.get(integrationId).catch(() => {
        return null;
    });
    if (!integration) {
        next(new error_handling_1.PizzlyError('unknown_integration'));
        return;
    }
    const userScopes = req.body.scopes || [];
    if (!Array.isArray(userScopes)) {
        next(new error_handling_1.PizzlyError('invalid_scopes'));
        return;
    }
    const scopes = integrations.validateConfigurationScopes(userScopes.join('\n')) || [];
    const credentials = integrations.validateConfigurationCredentials(req.body.credentials, integration);
    if (!credentials) {
        next(new error_handling_1.PizzlyError('invalid_credentials'));
        return;
    }
    const configuration = {
        id: configurationId,
        setup_id: configurationId,
        object: 'configuration',
        scopes,
        credentials
    };
    const affectedRows = await database_1.store('configurations')
        .where({ buid: integrationId, setup_id: configurationId })
        .update({
        credentials,
        scopes
    });
    if (!affectedRows) {
        next(new error_handling_1.PizzlyError('unknown_configuration'));
        return;
    }
    res.json({
        message: 'Configuration updated',
        configuration
    });
});
/**
 * Error handling (middleware)
 */
api.use((_req, res, _next) => {
    return res.status(404).json({ error: { type: 'missing', message: 'Ressource not found' } });
});
api.use((err, _req, res, _next) => {
    let status = 400;
    let type = 'invalid';
    let message = 'Bad request';
    if (err.type && err.status && err.message) {
        status = err.status;
        type = err.type;
        message = err.message;
    }
    else {
        console.error(err);
    }
    return res.status(status).json({ error: { type, message } });
});
/**
 * Helper function to test if a payload is well formated.
 * TODO - This should probably be enhanced
 */
function isOAuthPayload(payload) {
    if (!payload) {
        return false;
    }
    if (!payload.accessToken || typeof payload.accessToken !== 'string') {
        return false;
    }
    return true;
}
